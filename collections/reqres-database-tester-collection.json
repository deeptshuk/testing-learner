{
  "info": {
    "name": "ReqRes API Testing Suite - Database Tester Edition",
    "description": "Comprehensive API testing collection for database testers learning Postman and Newman CLI automation. Includes assertions for response body validation, status code testing, and complete CRUD operations using ReqRes API.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://reqres.in/api"
    },
    {
      "key": "userId",
      "value": "2"
    },
    {
      "key": "timestamp",
      "value": ""
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "pm.collectionVariables.set('timestamp', Date.now());",
          "console.log('Starting API test execution...');"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "pm.test('Response time is acceptable (< 2000ms)', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "pm.test('No server errors (5xx)', function () {",
          "    pm.expect(pm.response.code).to.not.be.within(500, 599);",
          "});"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "01 - User Management",
      "item": [
        {
          "name": "GET All Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();",
                  "",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is valid JSON', function () {",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "pm.test('Response has pagination structure', function () {",
                  "    pm.expect(responseJson).to.have.property('page');",
                  "    pm.expect(responseJson).to.have.property('per_page');",
                  "    pm.expect(responseJson).to.have.property('total');",
                  "    pm.expect(responseJson).to.have.property('total_pages');",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Data is array with 6 users', function () {",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "    pm.expect(responseJson.data).to.have.lengthOf(6);",
                  "});",
                  "",
                  "pm.test('All users have required fields', function () {",
                  "    responseJson.data.forEach(function(user) {",
                  "        pm.expect(user).to.have.property('id');",
                  "        pm.expect(user).to.have.property('email');",
                  "        pm.expect(user).to.have.property('first_name');",
                  "        pm.expect(user).to.have.property('last_name');",
                  "        pm.expect(user).to.have.property('avatar');",
                  "    });",
                  "});",
                  "",
                  "pm.test('Email format validation', function () {",
                  "    responseJson.data.forEach(function(user) {",
                  "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
                  "    });",
                  "});",
                  "",
                  "pm.test('Content-Type is application/json', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET Single User (Valid)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();",
                  "",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains single user object', function () {",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.be.an('object');",
                  "});",
                  "",
                  "pm.test('User has correct ID', function () {",
                  "    const expectedId = parseInt(pm.collectionVariables.get('userId'));",
                  "    pm.expect(responseJson.data.id).to.eql(expectedId);",
                  "});",
                  "",
                  "pm.test('User object has all required fields', function () {",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('email');",
                  "    pm.expect(responseJson.data).to.have.property('first_name');",
                  "    pm.expect(responseJson.data).to.have.property('last_name');",
                  "    pm.expect(responseJson.data).to.have.property('avatar');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET Single User (Not Found)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/23",
              "host": ["{{baseUrl}}"],
              "path": ["users", "23"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response body is empty object', function () {",
                  "    pm.expect(pm.response.json()).to.eql({});",
                  "});",
                  "",
                  "pm.test('Content-Type is still application/json', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST Create User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Database Tester\",\n    \"job\": \"API Testing Specialist\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();",
                  "",
                  "pm.test('User creation successful (201)', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response contains created user data', function () {",
                  "    pm.expect(responseJson).to.have.property('name');",
                  "    pm.expect(responseJson).to.have.property('job');",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('createdAt');",
                  "});",
                  "",
                  "pm.test('Created user has correct data', function () {",
                  "    pm.expect(responseJson.name).to.eql('Database Tester');",
                  "    pm.expect(responseJson.job).to.eql('API Testing Specialist');",
                  "});",
                  "",
                  "pm.test('ID is numeric and createdAt is ISO date', function () {",
                  "    pm.expect(responseJson.id).to.be.a('string');",
                  "    pm.expect(responseJson.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT Update User (Complete)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Senior Database Tester\",\n    \"job\": \"Lead API Testing Engineer\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();",
                  "",
                  "pm.test('Update successful (200)', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains updated data', function () {",
                  "    pm.expect(responseJson).to.have.property('name');",
                  "    pm.expect(responseJson).to.have.property('job');",
                  "    pm.expect(responseJson).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Updated data is correct', function () {",
                  "    pm.expect(responseJson.name).to.eql('Senior Database Tester');",
                  "    pm.expect(responseJson.job).to.eql('Lead API Testing Engineer');",
                  "});",
                  "",
                  "pm.test('updatedAt timestamp is valid', function () {",
                  "    pm.expect(responseJson.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE Remove User",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Delete successful (204)', function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test('Response body is empty', function () {",
                  "    pm.expect(pm.response.text()).to.eql('');",
                  "});",
                  "",
                  "pm.test('Content-Length is 0', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Length')).to.eql('0');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "02 - Authentication",
      "item": [
        {
          "name": "POST Register (Success)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"pistol\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/register",
              "host": ["{{baseUrl}}"],
              "path": ["register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();",
                  "",
                  "pm.test('Registration successful (200)', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains ID and token', function () {",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('token');",
                  "});",
                  "",
                  "pm.test('ID is numeric', function () {",
                  "    pm.expect(responseJson.id).to.be.a('number');",
                  "});",
                  "",
                  "pm.test('Token is alphanumeric string', function () {",
                  "    pm.expect(responseJson.token).to.be.a('string');",
                  "    pm.expect(responseJson.token).to.match(/^[a-zA-Z0-9]+$/);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST Register (Failure)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"sydney@fife\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/register",
              "host": ["{{baseUrl}}"],
              "path": ["register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();",
                  "",
                  "pm.test('Registration fails with 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message is present', function () {",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "    pm.expect(responseJson.error).to.eql('Missing password');",
                  "});",
                  "",
                  "pm.test('No ID or token in failed response', function () {",
                  "    pm.expect(responseJson).to.not.have.property('id');",
                  "    pm.expect(responseJson).to.not.have.property('token');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST Login (Success)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"cityslicka\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();",
                  "",
                  "pm.test('Login successful (200)', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains token', function () {",
                  "    pm.expect(responseJson).to.have.property('token');",
                  "});",
                  "",
                  "pm.test('Token is valid format', function () {",
                  "    pm.expect(responseJson.token).to.be.a('string');",
                  "    pm.expect(responseJson.token.length).to.be.above(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "03 - Performance & Edge Cases",
      "item": [
        {
          "name": "GET Delayed Response",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users?delay=3",
              "host": ["{{baseUrl}}"],
              "path": ["users"],
              "query": [
                {
                  "key": "delay",
                  "value": "3"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 despite delay', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is approximately 3 seconds', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.above(2900);",
                  "    pm.expect(pm.response.responseTime).to.be.below(4000);",
                  "});",
                  "",
                  "pm.test('Data is still returned correctly', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET Large Dataset (Page 2)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users?page=2",
              "host": ["{{baseUrl}}"],
              "path": ["users"],
              "query": [
                {
                  "key": "page",
                  "value": "2"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();",
                  "",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Page number is 2', function () {",
                  "    pm.expect(responseJson.page).to.eql(2);",
                  "});",
                  "",
                  "pm.test('Data array contains users', function () {",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "    pm.expect(responseJson.data.length).to.be.above(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ]
}